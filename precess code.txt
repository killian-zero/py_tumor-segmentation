def read_rtstruct(structure):
    contours = [] #列表
    #临床靶区（CTV），计划靶区（PTV）
    for i in range(len(structure.ROIContourSequence)):
        contour = {}
        if has_tag('ReferencedROINumber', structure.ROIContourSequence[i]): 
            contour['number'] = structure.ROIContourSequence[i].ReferencedROINumber
        # assert contour['number'] == structure.StructureSetROISequence[i].ROINumber
        if has_tag('ROIDisplayColor', structure.ROIContourSequence[i]): 
            contour['color'] = structure.ROIContourSequence[i].ROIDisplayColor
        if has_tag('ROIName', structure.StructureSetROISequence[i]): 
            contour['name'] = structure.StructureSetROISequence[i].ROIName
        if has_tag('ContourSequence', structure.ROIContourSequence[i]): 
            contour['contours'] = [s.ContourData for s in structure.ROIContourSequence[i].ContourSequence]
        contours.append(contour)
    return contours  


def get_contours(structure):  
    contours = []
    for i in range(len(structure.ROIContourSequence)):
        flag = ('CTV'== structure.StructureSetROISequence[i].ROIName) #肿瘤靶区（GTV）
        if flag:
            contour = {}
            contour['number'] = structure.ROIContourSequence[i].ReferencedROINumber
            #contour['name'] = 'GTV'
            contour['name'] = 'CTV'
            assert contour['number'] == structure.StructureSetROISequence[i].ROINumber #Structure Set ROI Sequence：靶区整体信息
            contour['contours'] = [s.ContourData for s in structure.ROIContourSequence[i].ContourSequence]
            contours.append(contour)
    return contours


def draw_labels(image, slices, contours):
    z = [np.around(s.ImagePositionPatient[2], 2) for s in slices]#z为list   np.around：四舍五入
    pos_r = slices[0].ImagePositionPatient[1]
    spacing_r = slices[0].PixelSpacing[1]
    pos_c = slices[0].ImagePositionPatient[0]
    spacing_c = slices[0].PixelSpacing[0]
    labels = []
    names = []
    
    for con in contours:
        # num = int(con['number'])
        label = np.zeros_like(image, dtype=np.float32)
        if 'contours' not in con:
            continue
        for c in con['contours']:
            nodes = np.array(c).reshape((-1, 3))
            try:
                #z_index = z.index(nodes[0, 2])#list.index()函数用于从列表中找出某个值第一个匹配项的索引位置
                z_index = z.index(np.around(nodes[0, 2], 2))
            except:
                continue
            r = (nodes[:, 1] - pos_r) / spacing_r
            c = (nodes[:, 0] - pos_c) / spacing_c
            rr, cc = polygon(r, c)
            label[rr, cc, z_index] = 1  
        labels.append(label)
        names.append(con['name'])
    return names, labels




def delete_extra_images(origin, mask):
    mask_dim = mask.shape[2]
    print(mask_dim)
    z_list = []

    for i in range(mask_dim):
        if np.sum(mask[:, :, i]) != 0:
            z_list.append(i)
    print(z_list)
    new_origin = rebuild_image(origin, z_list)
    new_mask = rebuild_image(mask, z_list)
    return new_origin, new_mask

def rebuild_image(image, z_list):
    img_list_2d = []
    for z in z_list:
        img_list_2d.append(image[:,:,z])
    print(np.array(img_list_2d).shape)
    return np.array(img_list_2d).transpose(1,2,0)
    #return np.array(img_list_2d).transpose(1,2,0)

def dump_image(savepath, image, imagepath):
    P = []
    P = os.path.basename(imagepath) 
    
    for z in range(image.shape[2]):
        path = os.path.join(savepath, P + '_%d.pkl.gz' % z)
        file = gzip.open(path, 'wb')
        pickle.dump(image[:, :, z], file, protocol=3)
        file.close()
    
# [0,1]
def normalize(image):
    MIN_BOUND = np.min(image)
    MAX_BOUND = np.max(image)
    image = (image - MIN_BOUND) / (MAX_BOUND - MIN_BOUND)
    image[image > 1] = 1.
    image[image < 0] = 0.
    return image




image_path = '/home/ma-user/work/mri/image/'
label_path = '/home/ma-user/work/mri/label/'

for subdirname in subdir:    
    dcms_ct = glob.glob(os.path.join(subdirname, '*.Image*.dcm'))
    print(dcms_ct)
    rtstruct = glob.glob(os.path.join(subdirname, '*.MRI_1.dcm'))
    print(rtstruct[0])
    slices_ct= sort_slices(read_all_slices(dcms_ct))
    image_ct = np.stack([s.pixel_array for s in slices_ct], axis=-1).astype(np.float32)
    print(image_ct.shape)
    #print(slices_ct[0])
    #image_ct = image_ct * slices_ct[0].RescaleSlope + slices_ct[0].RescaleIntercept
    contours = read_rtstruct(pydicom.read_file(rtstruct[0]))
    names, labels = draw_labels(image_ct, slices_ct, contours)
    print(names)
    if 'CTV' in names:
        idx = names.index('CTV')
    
    image_ct, labels[idx] = delete_extra_images(image_ct, labels[idx])
    print(labels[idx].shape)
    
    for z in range(image_ct.shape[2]):
        plt.figure(figsize=(20,20))
        plt.subplot(121)
        plt.imshow(image_ct[:,:,z], 'gray')
        plt.subplot(122)
        plt.imshow(labels[idx][:,:,z], 'gray')
        plt.axis('off')
        plt.show()
        plt.close()
        
    #dump_image(image_path, image_ct, subdirname)
    #dump_image(label_path, labels[idx], subdirname)